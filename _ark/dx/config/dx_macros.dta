#define GEMCOLOR_SET
(green red yellow blue orange)
#define NORMALGEM_SET
(gem_green.wid gem_red.wid gem_yellow.wid gem_blue.wid gem_orange.wid)
#define HOPOGEM_SET
(gem_green_hopo.wid gem_red_hopo.wid gem_yellow_hopo.wid gem_blue_hopo.wid gem_orange_hopo.wid)
#define VENUES
(#ifndef MINIMAL_VENUES
   small_club_01
   small_club_02
   small_club_03
   small_club_04
   small_club_05
   small_club_06
   small_club_07
   small_club_08
   small_club_09
   small_club_10
   small_club_11
   small_club_12
   small_club_13
   small_club_14
   small_club_15
   small_club_16
   small_club_17
   #endif
   big_club_01
   big_club_02
   big_club_03
   big_club_04
   big_club_05
   big_club_06
   big_club_07
   big_club_08
   big_club_09
   big_club_10
   big_club_11
   big_club_12
   big_club_13
   big_club_14
   big_club_15
   big_club_16
   big_club_17
   big_club_18
   #ifndef MINIMAL_VENUES
   theater_01
   theater_02
   theater_03
   theater_04
   theater_05
   theater_06
   theater_07
   theater_08
   theater_09
   theater_10
   theater_11
   #endif
   arena_01
   arena_02
   arena_03
   arena_04
   arena_05
   arena_06
   arena_07
   arena_08
   arena_09
   arena_10
   arena_11
   arena_12
   arena_13
   arena_14
   arena_15
   arena_16)
#define VIDEO_VENUES
(video_01 video_02 video_03 video_04 video_05)
#define H2H_VENUES
(big_club_01 big_club_02 big_club_03 big_club_04 big_club_05 big_club_06 big_club_07 big_club_09 big_club_10 big_club_11 big_club_12 big_club_13 big_club_15 big_club_16 big_club_17 big_club_18)
#define NEW_VENUES
(small_club_13 small_club_14 small_club_15 small_club_16 small_club_17 big_club_14 big_club_15 big_club_16 big_club_17 big_club_18 theater_10 theater_11 arena_09 arena_10 arena_11 arena_12 arena_13 arena_14 arena_15 arena_16)
#define BLACK_VENUE
(arena_99)
#define BLACK_VENUE_H2H
(arena_99)
#define NEW_H2H_VENUES
(big_club_15 big_club_16 big_club_17 big_club_18)
#define DX_FPS_SETUP
(
	{if {!= $emulatefps 24} {{$world iterate PostProc $p {$p set emulate_fps $emulatefps}}}
	{if {>= {$emulatefps 25} {$char iterate CharHair $hair {$hair reset 35}}
	{$world iterate WorldDir $wd {$wd iterate BandCamShot $bcs
	{foreach $property (shake_noisefreq shake_noiseamp) {$bcs set (keyframes $i $property) {'*' {$bcs get (keyframes $i $property)} 0.25}}}
   {foreach $component (x y) {$bcs set (keyframes $i shake_maxangle $component) {'*' {$bcs get (keyframes $i shake_maxangle $component)} 0.25}}}}}}}}
)
#define DX_TEXTURE_RESET_HANDLER
(

   {if {== $gem rb2} {set $gem "none"}}

   {if {== $smasher rb2} {set $smasher "none"}}

   {if {== $streak rb2} {set $streak "none"}}

   {if {== $spotlightgtr rb2_guitar} {set $spotlightgtr "none"}}

   {if {== $spotlightbass rb2_bass} {set $spotlightbass "none"}}

   {if {== $spotlightdrum rb2_drums} {set $spotlightdrum "none"}}

   {if {== $multiring rb2} {set $multiring "none"}}

   {if {== $odbar rb2} {set $odbar "none"}}

   {if {== $rails rb2} {set $rails "none"}}

   {if {== $flames rb2} {set $flames "none"}}

   {if {== $scoretex rb2} {set $scoretex "none"}}

   {if {== $voxarrow rb2} {set $voxarrow "none"}}

   {if {== $voxnotes rb2} {set $voxnotes "none"}}
   
   {if {== $voxod rb2} {set $voxod "none"}}
   
   {if {== $voxhw rb2} {set $voxhw "none"}}
   
)

#define DX_TRACK_TEXTURE_HANDLER
(
{unless {modifier_mgr is_modifier_active mod_nohud}

   {unless $texrunonce
      ;{new Tex transparent.tex} ;the new tex doesnt save so i changed it to an unused existing tex -LX
      {{$this find all_icons.tex} set_bitmap "track/custom_track_textures/_no_highway.png"}
      {{$this find track_reflect.tex} set_bitmap "track/custom_track_textures/white.png"}
   }

   {{$this find track_reflect.tex} iterate_refs $ref {$ref set intensify {! {modifier_mgr is_modifier_active mod_hw_alpha}}}}

   {unless $dontrungemdividers
   {if_else {modifier_mgr is_modifier_active mod_gemdivider}
      {beatmatch foreach_active_player $player
         {switch {$player instrument}
            (bass {{{{get_track_panel} find bass} find drum_slots_narrow.mat} set diffuse_tex {$this find all_icons.tex}})
            (guitar {{{{get_track_panel} find guitar} find drum_slots_narrow.mat} set diffuse_tex {$this find all_icons.tex}})
            (drum {{{{get_track_panel} find drum} find drum_slots_narrow.mat} set diffuse_tex {$this find all_icons.tex}})}}
      {beatmatch foreach_active_player $player ;handle adding the appropriate callbacks to each player
         {switch {$player instrument}
            (bass {{{{get_track_panel} find bass} find drum_slots_narrow.mat} set diffuse_tex {$this find beat_marker.tex}})
            (guitar {{{{get_track_panel} find guitar} find drum_slots_narrow.mat} set diffuse_tex {$this find beat_marker.tex}})
            (drum {{{{get_track_panel} find drum} find drum_slots_narrow.mat} set diffuse_tex {$this find beat_marker.tex}})}}
   }}
   
   {if $highwaycustomtexture
      {{$this find track_reflect_warning.tex} set_bitmap {sprint "track_new/highways/" $highway ".png"}}
      {if_else {== $highway "_1_none"}
         {do
         {{$this find track_reflect_warning.tex} iterate_refs $ref {$ref set intensify FALSE}}
         }
         {do
         {{$this find track_reflect_warning.tex} iterate_refs $ref {$ref set intensify TRUE}}
         }
      }
   }

   {if $voxhwcustomtexture 
      {{$this find vocal_bg.tex} set_bitmap {sprint "track/voxhw/vocal_bg_" $voxhw ".png"}}
   }
   {if $gemcustomtexture
      {{$this find prism_gems.tex} set_bitmap {sprint "track/gems/prism_gems_" $gem ".png"}}
	  {{$this find prism_gem_emissive.tex} set_bitmap {sprint "track/gems/prism_gem_emissive_" $gem ".png"}}
	  {{$this find prism_gem_emissive_3_player.tex} set_bitmap {sprint "track/gems/prism_gem_emissive_3_player_" $gem ".png"}}
	  {{$this find prism_gem_emissive_dynamic.tex} set_bitmap {sprint "track/gems/prism_gem_emissive_dynamic_" $gem ".png"}}
	  {{$this find prism_gem_emissive_dynamic_red.tex} set_bitmap {sprint "track/gems/prism_gem_emissive_dynamic_red_" $gem ".png"}}
	  {{$this find prism_green.tex} set_bitmap {sprint "track/gems/prism_green_" $gem ".png"}}
	  {{$this find prism_red.tex} set_bitmap {sprint "track/gems/prism_red_" $gem ".png"}}
     {{$this find prism_spotlight.tex} set_bitmap {sprint "track/gems/prism_spotlight_" $gem ".png"}}
     {if {|| {== $gem "riski"} {== $gem "riskidx"}}
         {{$this find track_flash_blue.tex} set_bitmap "track/custom_track_textures/track_flash_blue.png"}
         {{$this find track_flash_blue_glow.tex} set_bitmap "track/custom_track_textures/track_flash_blue_glow.png"}
         {{$this find track_flash_red.tex} set_bitmap "track/custom_track_textures/track_flash_red.png"}
         {{$this find track_flash_red_glow.tex} set_bitmap "track/custom_track_textures/track_flash_red_glow.png"}
         {{$this find track_flash_yellow.tex} set_bitmap "track/custom_track_textures/track_flash_yellow.png"}
         {{$this find track_flash_yellow_glow.tex} set_bitmap "track/custom_track_textures/track_flash_yellow_glow.png"}
     }
   }

   {if $smashercustomtexture
   {do
      {{$this find black_smasher_blue_nomip.tex} set_bitmap {sprint "track_new/smashers/black_smasher_blue_" $smasher ".png"}}
      {{$this find black_smasher_green_nomip.tex} set_bitmap {sprint "track_new/smashers/black_smasher_green_" $smasher ".png"}}
      {{$this find black_smasher_norm.tex} set_bitmap {sprint "track_new/smashers/black_smasher_norm_" $smasher ".png"}}
      {{$this find black_smasher_spec.tex} set_bitmap {sprint "track_new/smashers/black_smasher_spec_" $smasher ".png"}}
      {{$this find black_smasher_norm_drums.tex} set_bitmap {sprint "track_new/smashers/black_smasher_norm_drums_" $smasher ".png"}}
      {{$this find black_smasher_orange_nomip.tex} set_bitmap {sprint "track_new/smashers/black_smasher_orange_" $smasher ".png"}}
      {{$this find black_smasher_red_nomip.tex} set_bitmap {sprint "track_new/smashers/black_smasher_red_" $smasher ".png"}}
      {{$this find black_smasher_yellow_nomip.tex} set_bitmap {sprint "track_new/smashers/black_smasher_yellow_" $smasher ".png"}}
      {{$this find square_smasher_bright_blue.tex} set_bitmap {sprint "track_new/smashers/square_smasher_bright_blue_" $smasher ".png"}}
      {{$this find square_smasher_bright_green.tex} set_bitmap {sprint "track_new/smashers/square_smasher_bright_green_" $smasher ".png"}}
      {{$this find square_smasher_bright_orange.tex} set_bitmap {sprint "track_new/smashers/square_smasher_bright_orange_" $smasher ".png"}}
      {{$this find square_smasher_bright_red.tex} set_bitmap {sprint "track_new/smashers/square_smasher_bright_red_" $smasher ".png"}}
      {{$this find square_smasher_bright_yellow.tex} set_bitmap {sprint "track_new/smashers/square_smasher_bright_yellow_" $smasher ".png"}}
      {{$this find flare_green.tex} set_bitmap {sprint "track_new/smashers/flare_green_" $smasher ".png"}}
      {{$this find flare_red.tex} set_bitmap {sprint "track_new/smashers/flare_red_" $smasher ".png"}}
      {{$this find flare_yellow.tex} set_bitmap {sprint "track_new/smashers/flare_yellow_" $smasher ".png"}}
      {{$this find flare_blue.tex} set_bitmap {sprint "track_new/smashers/flare_blue_" $smasher ".png"}}
      {{$this find flare_orange.tex} set_bitmap {sprint "track_new/smashers/flare_orange_" $smasher ".png"}}
      {{$this find flare_style.tex} set_bitmap {sprint "track_new/smashers/flare_style_" $smasher ".png"}}
   }
   }

   {if $flamescustomtexture
      {{$this find radial_shockwave.tex} set_bitmap {sprint "track_new/flames/radial_shockwave_" $flames ".png"}}
      {{$this find radial_shockwave_subtract.tex} set_bitmap {sprint "track_new/flames/radial_shockwave_subtract_" $flames ".png"}}
      {{$this find shockwave.tex} set_bitmap {sprint "track_new/flames/shockwave_" $flames ".png"}}
      {{$this find flare_orange_kick_smasher.tex} set_bitmap {sprint "track_new/flames/flare_orange_kick_smasher_" $flames ".png"}}
      {{$this find flare_light_can_star.tex} set_bitmap {sprint "track_new/flames/flare_light_can_star_" $flames ".png"}}
      {{$this find broken_glass01.tex} set_bitmap {sprint "track_new/flames/broken_glass01_" $flames ".png"}}
      {{$this find broken_glass02.tex} set_bitmap {sprint "track_new/flames/broken_glass02_" $flames ".png"}}
      {{$this find gem_cap.tex} set_bitmap {sprint "track_new/flames/gem_cap_" $flames ".png"}}
      {{$this find spark.tex} set_bitmap {sprint "track_new/flames/sparks_" $flames ".png"}}
      {{$this find sparks.tex} set_bitmap {sprint "track_new/flames/sparks_" $flames ".png"}}
   }
   
   {if $voxarrowcustomtexture
      {{$this find pitch_arrow_split.tex} set_bitmap {sprint "track/voxarrow/pitch_arrow_split_" $voxarrow ".png"}}
      {{$this find pitch_arrow_effect.tex} set_bitmap {sprint "track/voxarrow/pitch_arrow_effect_" $voxarrow ".png"}}
   }
   
   {if $voxnotescustomtexture
	  {{$this find 3d_tube_pitched.tex} set_bitmap {sprint "track/voxnotes/3d_tube_pitched_" $voxnotes ".png"}}
	  {{$this find tube_1.tex} set_bitmap {sprint "track/voxnotes/3d_tube_pitched_star_anim1_" $voxnotes ".png"}}
	  {{$this find tube_2.tex} set_bitmap {sprint "track/voxnotes/3d_tube_pitched_star_anim2_" $voxnotes ".png"}}
	  {{$this find tube_3.tex} set_bitmap {sprint "track/voxnotes/3d_tube_pitched_star_anim3_" $voxnotes ".png"}}
	  {{$this find tube_4.tex} set_bitmap {sprint "track/voxnotes/3d_tube_pitched_star_anim4_" $voxnotes ".png"}}
   }
   
   {if $voxodcustomtexture
	  {{$this find sunburst.tex} set_bitmap {sprint "track/voxod/sunburst_" $voxod ".png"}}
	  {{$this find freestyle_nowbar_FX.tex} set_bitmap {sprint "track/voxod/vox_now_bar_effect_" $voxod ".png"}}
   }

   {if $scorecustomtexture
      {{$this find indv_player_meter_circle.tex} set_bitmap {sprint "track/score/indv_player_meter_circle_" $scoretex ".png"}}
      {{$this find indv_player_meter_glass.tex} set_bitmap {sprint "track/score/indv_player_meter_glass_" $scoretex ".png"}}
	  {{$this find indv_player_meter_glow.tex} set_bitmap {sprint "track/score/indv_player_meter_glow_" $scoretex ".png"}}
	  {{$this find indv_player_meter.png} set_bitmap {sprint "track/score/indv_player_meter_" $scoretex ".png"}}
	  {{$this find star_sheet.tex} set_bitmap {sprint "track/score/star_power_" $scoretex ".png"}}
	  {{$this find score_meter_wipe.tex} set_bitmap {sprint "track/score/score_meter_wipe_" $scoretex ".png"}}
   }

   {if $odbarcustomtexture
      {{$this find rb2_player_meter_background.tex} set_bitmap {sprint "track/overdrive_bar/player_meter_background_" $odbar ".png"}}
      {{$this find player_meter_long.tex} set_bitmap {sprint "track/overdrive_bar/player_meter_long_" $odbar ".png"}}
	   {{$this find rising_sun_fx_small.tex} set_bitmap {sprint "track/overdrive_bar/rising_sun_fx_small_" $odbar ".png"}}
      {{$this find indv_player_meter_bar.tex} set_bitmap {sprint "track/overdrive_bar/indv_player_meter_bar_" $odbar ".png"}}
   }

   {if $multiringcustomtexture
      {{$this find multiplier_cap_glass_vox.tex} set_bitmap {sprint "track/multiplier_ring/multiplier_cap_glass_vox_" $multiring ".png"}}
      {{$this find multiplier_meter_glow.tex} set_bitmap {sprint "track/multiplier_ring/multiplier_meter_glow_" $multiring ".png"}}
      {{$this find multiplier_meter.tex} set_bitmap {sprint "track/multiplier_ring/multiplier_meter_" $multiring ".png"}}
      {{$this find multiplier_meter_solid..tex} set_bitmap {sprint "track/multiplier_ring/multiplier_meter_solid_" $multiring ".png"}}
   }

   {if $streakcustomtexture
      {{$this find bass_superstreak_pattern.tex} set_bitmap {sprint "track_new/streak/" $streak ".png"}}
   }

   {if $railscustomtexture
      {{$this find rails.tex} set_bitmap {sprint "track/rails/rails_" $rails ".png"}}
      {{$this find rails.tex} iterate_refs $ref {$ref set intensify {!= $rails "rb2"}}}
   }
   
   {if $spotlightgtrcustomtexture
      {{$this find spotlight_guitar_track.tex} set_bitmap {sprint "track_new/spotlight/" $spotlightgtr ".png"}}
      ;{{$this find spotlight_guitar_track.tex} iterate_refs $ref {$ref set color {pack_color 1 0 0}}}
      ; will implement when im done being lazy
      {if_else {exists {sprint "track_new/spotlight/" $spotlightgtr "_emissive.png"}}
         {do
            {{$this find spotlight_guitar_track_emmissive.tex} set_bitmap {sprint "track_new/spotlight/" $spotlightgtr "_emissive.png"}}
         }
         {do
            {{$this find spotlight_guitar_track_emmissive.tex} set_bitmap "track/custom_track_textures/_no_highway.png"}
         }
      }
   }
   
   {if $spotlightbasscustomtexture
      {{$this find spotlight_bass_track.tex} set_bitmap {sprint "track_new/spotlight/" $spotlightbass ".png"}}
      ;{{$this find spotlight_bass_track.tex} iterate_refs $ref {$ref set color {pack_color 1 0 0}}}
      ; will implement when im done being lazy
      {if_else {exists {sprint "track_new/spotlight/" $spotlightbass "_emissive.png"}}
         {do
            {{$this find spotlight_bass_track_emissive.tex} set_bitmap {sprint "track_new/spotlight/" $spotlightbass "_emissive.png"}}
         }
         {do
            {{$this find spotlight_bass_track_emissive.tex} set_bitmap "track/custom_track_textures/_no_highway.png"}
         }
      }
   }
   
   {if $spotlightdrumcustomtexture
      {{$this find spotlight_drums_track.tex} set_bitmap {sprint "track_new/spotlight/" $spotlightdrum ".png"}}
      ;{{$this find spotlight_drums_track.tex} iterate_refs $ref {$ref set color {pack_color 1 0 0}}}
      ; will implement when im done being lazy
   }

;after all of the queued texture updates are completed, set them to false so they do not run again until a new texture is queued via overshell
{set $voxhwcustomtexture FALSE}
{set $gemcustomtexture FALSE}
{set $smashercustomtexture FALSE}
{set $voxarrowcustomtexture FALSE}
{set $voxnotescustomtexture FALSE}
{set $voxodcustomtexture FALSE}
{set $scorecustomtexture FALSE}
{set $odbarcustomtexture FALSE}
{set $railscustomtexture FALSE}
{set $flamescustomtexture FALSE}
{set $multiringcustomtexture FALSE}
{set $streakcustomtexture FALSE}
{set $spotlightgtrcustomtexture FALSE}
{set $spotlightbasscustomtexture FALSE}
{set $spotlightdrumcustomtexture FALSE}
{set $texrunonce TRUE}

}
)

#define DX_DO_CUSTOM_TEXTURE_HANDLER
(

{unless {== $gem none} {set $gemcustomtexture TRUE}}

{unless {== $smasher none} {set $smashercustomtexture TRUE}}

{unless {== $highway _1_none} {set $streakcustomtexture TRUE}}

{unless {== $streak none} {set $streakcustomtexture TRUE}}

{unless {== $spotlightgtr none} {set $spotlightgtrcustomtexture TRUE}}

{unless {== $spotlightbass none} {set $spotlightbasscustomtexture TRUE}}

{unless {== $spotlightdrum none} {set $spotlightdrumcustomtexture TRUE}}

{unless {== $multiring none} {set $multiringcustomtexture TRUE}}

{unless {== $odbar none} {set $odbarcustomtexture TRUE}}

{unless {== $rails none} {set $railscustomtexture TRUE}}

{unless {== $flames none} {set $flamescustomtexture TRUE}}

{unless {== $scoretex none} {set $scorecustomtexture TRUE}}

{unless {== $voxarrow none} {set $voxarrowcustomtexture TRUE}}

{unless {== $voxnotes none} {set $voxnotescustomtexture TRUE}}

{unless {== $voxod none} {set $voxodcustomtexture TRUE}}

{unless {== $voxhw none} {set $voxhwcustomtexture TRUE}}

)
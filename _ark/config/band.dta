#include macros.dta
#ifndef HX_EE
#include macros_update.dta
#include xlast_macros_update.dta
#endif
#define GEMCOLOR_SET
(green red yellow blue orange)
(band_version
   #include band_version.dta)
(mem
   #include mem.dta)
(content_mgr
   (roots
      ".")
   (file_read_failed
      #ifndef HX_EE
      ($content_name $corrupt)
      {do
         ($trans_screen
            {ui transition_screen})
         {if_else
            {'||'
               {== $trans_screen practice_preloading_screen}
               {== $trans_screen preloading_screen}}
            {do
               {{$trans_screen focus_panel}
                  set
                  content_name
                  $content_name}
               {{$trans_screen focus_panel}
                  set
                  corrupt
                  $corrupt}}
            {band_ui content_file_read_failed $content_name $corrupt}}}
      #else
      {band_ui_sink content_file_read_failed}
      #endif
      )
   )
(profile_mgr
#ifndef HX_EE
   (max_characters 24)
   (max_bands 24)
   (max_remote_bands 50)
   (char_name_length 16)
   (band_name_length 32)
#else
   (max_chars_per_inst 8)
   (max_leaders_per_char 10)
   (max_bands_per_char 20)
   (char_name_length 20)
   (band_name_length 40)
#endif
   (motto_length 64))
(platform_mgr
#ifdef HX_EE
   (keyboard_allowed_chars
      " ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!\q#$%&'()*+,-./:;=?@[\\]^_`{|}~¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷ÿŸ⁄€‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ¯˘˙˚¸˝˛ˇ")
#endif
   (ps3_game_data_icon
      "mc/gamedata/icon0.png")
   (ps3_game_data_version
      "01.00"))
(system
#ifndef HX_EE
   (language
      (force eng))
#else
   (ng FALSE)
   (language)
   (region
      (force na))
#endif
   (iop_modules
      (iop/scrtchpd.irx)
      (iop/sio2man.irx)
      (iop/mtapman.irx)
      (iop/mcman.irx)
      (iop/mcserv.irx)
      (iop/usbd.irx
         "thpri=15,16")
      #ifndef _SHIP
      (iop/usbkb.irx
         "keybd=1"
         "debug=0")
      #endif
      (iop/padman.irx)
      (iop/msifrpc.irx)
      (iop/libsd.irx)
      (iop/sdrdrv.irx)
      (iop/cdvdstm.irx)
      #ifdef _DEBUG
      (iop/usbhmx_d.irx)
      #else
      #ifdef _SHIP
      (iop/usbhmx_s.irx)
      #else
      (iop/usbhmx_r.irx)
      #endif
      #endif)
#ifdef HX_PS3
   (ng TRUE)
#endif
#ifdef HX_XBOX
   (ng TRUE)
#endif
#ifdef HX_WII
   (ng FALSE)
#endif
   (xbox_map_file
      "%s/band_%s.map")
   #ifdef HX_PS3
   (commerce_container TRUE)
   (trophies TRUE)
   (np_communication_id
      "NPWR00440_00")
   (titles
      (rb2
         (title_id
            (live
               "BLUS30147")
            (test
               "NPXX00360"))
         (service_id
            (live
               "UP0006-BLUS30147_00")
            (test
               "UP0006-NPXX00360_00")))
	 (rb3
         (title_id
            (live
               "ROCKBAND3")
            (test
               "NPXX00500"))
         (service_id
            (live
               "UP8802-BLUS30463_00")
            (test
               "UP0006-NPXX00500_00")))	 
      (rb1
         (title_id
            (live
               "BLUS30050")
            (test
               "NPXX00202"))
         (service_id
            (live
               "UP0006-BLUS30050_00")
            (test
               "UD2464-NPXX00202_00"))))
   #endif
   #ifdef HX_WII
   (load_commerce_container $commerce)
   (titles
      (rb2
         (title_id
            (live
               "BLUS30147")
            (test
               "NPXX00360"))
         (service_id
            (live
               "UP0006-BLUS30147_00")
            (test
               "UP0006-NPXX00360_00"))))
   #endif)
(synth
   #include synth.dta)
(joypad
   (ignore)
   (hold_ms 1000)
   (repeat_ms 80)
   (midi_joypad
      (disable FALSE))
   (controller_mapping
      (ro_guitar guitar)
      (ro_guitar_xbox ro_guitar_xbox)
      (strat_xbox ro_guitar_xbox)
      (strat_xbox_rb2 ro_guitar_xbox)
      (hx_guitar_ps3 hx_guitar_ps3)
      (ps3_rb2_guitar hx_guitar_ps3)
      (ro_guitar_ps3 ro_guitar_ps3)
      (midi midi_drums)
      (hx_drums_xbox hx_drums_xbox)
      (hx_drums_xbox_rb2 hx_drums_xbox)
      (hx_drums_xbox_ghwt hx_drums_xbox)
      (hx_drums_ps3 hx_drums_ps3)
      (hx_drums_ps3_rb2 hx_drums_ps3)
      (hx_drums_ps3_ghwt hx_drums_ps3)
      (hx_drums_ps3_konami hx_drums_ps3)
      (hx_xbox joypad_guitar_xbox)
      (digital joypad)
      (analog joypad)
      (dualshock joypad)
      (stagekit_xbox joypad)
#ifdef HX_WII
      (wii_remote wii_remote)
      (wii_classic wii_classic)
      (gamecube gamecube)
      (wii_guitar wii_guitar)
      (wii_drums wii_drums)
      (wii_roguitar wii_guitar)
      (wii_rodrums wii_rodrums)
#endif
      (none joypad))
   (instrument_mapping
      (ro_guitar kControllerGuitar)
      (ro_guitar_xbox kControllerGuitar)
      (strat_xbox kControllerGuitar)
      (strat_xbox_rb2 kControllerGuitar)
      (hx_guitar_ps3 kControllerGuitar)
      (ps3_rb2_guitar kControllerGuitar)
      (ro_guitar_ps3 kControllerGuitar)
#ifdef HX_WII
      (wii_guitar kControllerGuitar)
      (wii_roguitar kControllerGuitar)
#endif
      (midi kControllerDrum)
      (hx_drums_xbox kControllerDrum)
      (hx_drums_xbox_rb2 kControllerDrum)
      (hx_drums_xbox_ghwt kControllerDrum)
      (ps3_rb2_drums kControllerDrum)
      (hx_drums_ps3 kControllerDrum)
      (hx_drums_ps3_rb2 kControllerDrum)
      (hx_drums_ps3_ghwt kControllerDrum)
      (hx_drums_ps3_konami kControllerDrum)
#ifdef HX_WII
      (wii_drums kControllerDrum)
      (wii_rodrums kControllerDrum)
      (hx_xbox kControllerVocals)
      (digital kControllerVocals)
      (analog kControllerVocals)
      (dualshock kControllerVocals)
#endif
      (hx_xbox
         {if_else
            {modifier_mgr is_modifier_active mod_padguitar}
            kControllerGuitar
            {if_else
               {modifier_mgr is_modifier_active mod_paddrum}
                  kControllerDrum
                  kControllerVocals}})
      (digital
          {if_else
            {modifier_mgr is_modifier_active mod_padguitar}
            kControllerGuitar
            {if_else
               {modifier_mgr is_modifier_active mod_paddrum}
                  kControllerDrum
                  kControllerVocals}})
      (analog
          {if_else
            {modifier_mgr is_modifier_active mod_padguitar}
            kControllerGuitar
            {if_else
               {modifier_mgr is_modifier_active mod_paddrum}
                  kControllerDrum
                  kControllerVocals}})
      (dualshock 
         {if_else
            {modifier_mgr is_modifier_active mod_padguitar}
            kControllerGuitar
            {if_else
               {modifier_mgr is_modifier_active mod_paddrum}
                  kControllerDrum
                  kControllerVocals}})
      (stagekit_xbox kControllerVocals)
#ifdef HX_WII
      (wii_remote kControllerVocals)
      (wii_classic kControllerVocals)
      (gamecube kControllerVocals)
#endif
      (none kControllerNone)))
(spew
   #include spew.dta)
#ifdef HX_WII
(timer
   (world
      (enable TRUE)
      (draw FALSE)
      (budget 7))
   (world_regular
      (enable TRUE)
      (budget 9))
   (world_char
      (enable TRUE)
      (budget 9))
   (world_postproc
      (enable TRUE)
      (budget 9))
   (hud_track
      (enable TRUE)
      (budget 6))
   (game_etc
      (enable TRUE))
   (cpu
      (draw FALSE))
   (cpu_regular
      (enable TRUE)
      (budget 16.7))
   (cpu_char
      (enable TRUE)
      (budget 16.7))
   (cpu_postproc
      (enable TRUE)
      (budget 16.7))
   (gs
      (draw FALSE))
   (gs_regular
      (enable TRUE)
      (budget 16.7))
   (gs_char
      (enable TRUE)
      (budget 16.7))
   (gs_postproc
      (enable TRUE)
      (budget 16.7))
   (synth_poll
      (enable TRUE))
   (net_poll
      (enable TRUE)))
#else
#ifdef HX_EE
   (anim
      (enable TRUE))
   (synth
      (enable TRUE))
   (movie
      (enable TRUE)
      (budget 7)
      (draw TRUE))
   (ui_draw
      (enable TRUE))
   (ui_poll
      (enable TRUE))
   (cpu
      (draw FALSE))
   (cpu_regular
      (enable TRUE)
      (budget 16.7))
   (gs
      (draw FALSE))
   (gs_regular
      (enable TRUE)
      (budget 15.0))
   (trackpanel_poll
      (enable FALSE)
      (budget 5))
   (draw
      (enable FALSE))
   (world
      (enable TRUE)
      (draw FALSE))
   (vag_decryption
      (enable FALSE))
#else
(timer
   (world
      (enable TRUE)
      (draw FALSE))
   (world_regular
      (enable TRUE)
      (budget 9))
   (world_postproc
      (enable TRUE)
      (budget 9))
   (hud_track
      (enable TRUE)
      (budget 6))
   (game_etc
      (enable TRUE)
      (draw FALSE))
   (game_etc_r
      (enable TRUE)
      (budget 1))
   (game_etc_pp
      (enable TRUE)
      (budget 1))
   (cpu
      (draw FALSE))
   (cpu_regular
      (enable TRUE)
      (budget 16.7))
   (cpu_postproc
      (enable TRUE)
      (budget 16.7))
   (gs
      (draw FALSE))
   (gs_regular
      (enable TRUE)
      (budget 16.7))
   (gs_postproc
      (enable TRUE)
      (budget 16.7))
   (synth_poll
      (enable TRUE))
   (net_poll
      (enable TRUE))
   (debug
      (enable TRUE))
   (gamepanel_poll
      (enable TRUE))
   (track_poll
      (enable TRUE))
   (world_poll
      (enable TRUE))
   (nowbar
      (enable TRUE))
   (nowbar_poll
      (enable TRUE))
   (system_poll
      (enable TRUE))
   (taskmgr_poll
      (enable TRUE))
   (synth_poll
      (enable TRUE))
   (track_draw
      (enable TRUE))
   (world_draw
      (enable TRUE))
   (vorbis
      (enable TRUE)))
#endif
#endif
(rnd
#ifdef HX_EE
   (bpp 32)
   (pal TRUE)
#endif
   (title
      "Rock Band")
   (overlays
      (time
         (lines 1)
         (showing FALSE)
         (color 0 0 0 0.7))
      (cheats
         (lines 1)
         (showing FALSE)
         (color 0 0 0 0.7))
      (light_preset
         (lines 4)
         (showing FALSE)
         (color 0 0 0 0.5))
      (camera
         (lines 5)
         (showing FALSE)
         (color 0 0 0 0.5))
      (char_status
         (lines 4)
         (showing FALSE))
      (score
         (lines 15)
         (showing FALSE))
      (score_debug
         (lines 1)
         (showing FALSE))
      (lights
         (lines 1)
         (showing FALSE))
      (camtest
         (lines 1)
         (showing FALSE))
      (latency
         (lines 2)
         (showing FALSE)))
   #ifdef HX_EE
   (timer_script
      {set_timer_ms
         game
         {-
            {-
               {-
                  {timer_ms cpu}
                  {timer_ms world}}
               {timer_ms hud_track}}
            {timer_ms debug}}}
      {switch
         {rnd last_proc_cmds}
         (kProcessPost
            {set
               $world_postproc
               {timer_ms world}}
            {set
               $cpu_postproc
               {timer_ms cpu}}
            {set
               $gs_postproc
               {timer_ms gs}})
         (kProcessWorld
            {set
               $world_regular
               {timer_ms world}}
            {set
               $cpu_regular
               {timer_ms cpu}}
            {set
               $gs_regular
               {timer_ms gs}})
         (kProcessAll
            {set $world_postproc 0}
            {set $cpu_postproc 0}
            {set $gs_postproc 0}
            {set
               $world_regular
               {timer_ms world}}
            {set
               $cpu_regular
               {timer_ms cpu}}
            {set
               $gs_regular
               {timer_ms gs}})}
      {set_timer_ms world_postproc $world_postproc}
      {set_timer_ms cpu_postproc $cpu_postproc}
      {set_timer_ms gs_postproc $gs_postproc}
      {set_timer_ms world_regular $world_regular}
      {set_timer_ms cpu_regular $cpu_regular}
      {set_timer_ms gs_regular $gs_regular}
      {switch
         {rnd last_proc_cmds}
         (kProcessPost
            {set
               $world_postproc
               {timer_ms world}}
            {set
               $cpu_postproc
               {timer_ms cpu}}
            {set
               $gs_postproc
               {timer_ms gs}})
         (kProcessWorld
            {set
               $world_regular
               {timer_ms world}}
            {set
               $cpu_regular
               {timer_ms cpu}}
            {set
               $gs_regular
               {timer_ms gs}})
         (kProcessAll
            {set $world_postproc 0}
            {set $cpu_postproc 0}
            {set $gs_postproc 0}
            {set
               $world_regular
               {timer_ms world}}
            {set
               $cpu_regular
               {timer_ms cpu}}
            {set
               $gs_regular
               {timer_ms gs}})}
      {set_timer_ms world_postproc $world_postproc}
      {set_timer_ms cpu_postproc $cpu_postproc}
      {set_timer_ms gs_postproc $gs_postproc}
      {set_timer_ms world_regular $world_regular}
      {set_timer_ms cpu_regular $cpu_regular}
      {set_timer_ms gs_regular $gs_regular})
   (text_superscript_scale 0.5)
   #else
   (timer_script
      {set_timer_ms
         game_etc
         {-
            {-
               {-
                  {timer_ms cpu}
                  {timer_ms world}}
               {timer_ms hud_track}}
            {timer_ms debug}}}
      {switch
         {rnd last_proc_cmds}
         (kProcessPost
            {set
               $world_postproc
               {timer_ms world}}
            {set
               $cpu_postproc
               {timer_ms cpu}}
            {set
               $gs_postproc
               {timer_ms gs}})
         (kProcessWorld
            {set
               $world_regular
               {timer_ms world}}
            {set
               $cpu_regular
               {timer_ms cpu}}
            {set
               $gs_regular
               {timer_ms gs}})
         (kProcessAll
            {set $world_postproc 0}
            {set $cpu_postproc 0}
            {set $gs_postproc 0}
            {set
               $world_regular
               {timer_ms world}}
            {set
               $cpu_regular
               {timer_ms cpu}}
            {set
               $gs_regular
               {timer_ms gs}})}
      {set_timer_ms world_postproc $world_postproc}
      {set_timer_ms cpu_postproc $cpu_postproc}
      {set_timer_ms gs_postproc $gs_postproc}
      {set_timer_ms world_regular $world_regular}
      {set_timer_ms cpu_regular $cpu_regular}
      {set_timer_ms gs_regular $gs_regular})
   (text_superscript_scale 0.42))
#endif
#ifndef HX_EE
(store
   #include store.dta)
(ugc_store
   #include ugc_store.dta)
#endif
(ui
   #include ../ui/ui.dta)
(attract
   #include attract.dta)
(net
   #include net.dta)
(objects
   #include objects.dta
#ifndef HX_EE
   (updated_song_select_slots
      (ugc_purchased
         (object
            mesh
            "ugc.mesh")
         (colors
            (normal
               (normal 1.0 1.0 1.0)
               (focused 1.0 1.0 1.0)
               (disabled 1.0 1.0 1.0)
               (selecting 1.0 1.0 1.0))
            (highlight
               (normal 0.8 0.8 0.8)
               (focused 0.8 0.8 0.8)
               (disabled 0.8 0.8 0.8)
               (selecting 0.8 0.8 0.8))
            (disabled
               (normal 0.5 0.5 0.5)
               (focused 0.5 0.5 0.5)
               (disabled 0.5 0.5 0.5)
               (selecting 0.5 0.5 0.5)))
         (dummy '')))
   (updated_song_select_resource_node
      (other_resource_file
         "../ui/resource/list_song_select_ugc.milo"))
   (updated_song_shortcut_slot
      (shortcut_smaller
         (object
            text
            "shortcut_smaller.lbl")
         (colors
            (normal
               (normal 0 0 0)
               (focused 0.8 0.8 0.8)
               (disabled 0.5 0.5 0.5)
               (selecting 0.8 0.8 0.8))
            (highlight
               (normal 0 0 0)
               (focused 0 0 0)
               (disabled 0.5 0.5 0.5)
               (selecting 0 0 0))
            (disabled
               (normal 0.5 0.5 0.5)
               (focused 0.5 0.5 0.5)
               (disabled 0.5 0.5 0.5)
               (selecting 0.5 0.5 0.5)))
         (dummy
            "Shortcut Test Right Here")))
   (updated_song_setlist_resource_node
      (other_resource_file
         "../ui/resource/list_store_shortcut_update.milo")))
#endif
(locale ../ui/eng/locale_milo.dta ../ui/eng/locale.dta ../ui/eng/locale_updates.dta)
(venues VENUES)
#ifndef HX_EE
(song_select
   #include song_select.dta)
#endif
(song_groupings
   (rank
      ((drum generic_tier1)
         (guitar generic_tier1)
         (bass generic_tier1)
         (vocals generic_tier1)
         (band generic_tier1))
      ((drum generic_tier2)
         (guitar generic_tier2)
         (bass generic_tier2)
         (vocals generic_tier2)
         (band generic_tier2))
      ((drum generic_tier3)
         (guitar generic_tier3)
         (bass generic_tier3)
         (vocals generic_tier3)
         (band generic_tier3))
      ((drum generic_tier4)
         (guitar generic_tier4)
         (bass generic_tier4)
         (vocals generic_tier4)
         (band generic_tier4))
      ((drum generic_tier6)
         (guitar generic_tier6)
         (bass generic_tier6)
         (vocals generic_tier6)
         (band generic_tier6))
      ((drum generic_tier8)
         (guitar generic_tier8)
         (bass generic_tier8)
         (vocals generic_tier8)
         (band generic_tier8))
      ((drum generic_tier9)
         (guitar generic_tier9)
         (bass generic_tier9)
         (vocals generic_tier9)
         (band generic_tier9)))
   #ifdef HX_EE
   (genre alternative blues classicrock country emo fusion glam grunge indierock jazz metal new_wave novelty numetal poprock prog punk rock southernrock urban other)
   (decade the60s the70s the80s the90s the00s)
   (alpha_song)
   (alpha_artist)
   #endif)
#ifdef HX_EE
(song_select_gap 30.0)
#endif
#ifndef HX_EE
(missing_song_data
   #include ../songs/rb1/missing_song_data.dta)
#endif
(quick_cheats
   #include cheats.dta)
(long_cheats
   #include long_cheats.dta)
(modifiers
   #include modifiers.dta)
(beatmatcher
   #include beatmatcher.dta)
(game
   #include game.dta)
(modes
   #include modes.dta)
(player
   #include player.dta)
(scoring
   #include scoring.dta)
(achievements
   #include achievements.dta)
(track_graphics
   #include track_graphics.dta)
(sound
   #include sound.dta)
(tour
   #include tour.dta)
(hud
   (crowd_meter
      (speed 0.9))
   (star_meter
      (speed 0.9))
   (lead_meter
      (max_lead 10000))
   (message_show_time 2.5)
   (sp_deploy_msg_delay 1.5)
   (sp_deploy_repeat_delay 7)
   #ifndef HX_EE
   (botb_names_fade_out_seconds 9)
   (botb_names_fade_in_seconds 10)
   #endif)
(characters
   #include characters.dta
   #ifdef HX_WII
   #include characters_ink.dta
   #endif)
(tips
   (#include tips.dta
   #ifndef HX_WII
      #include tips_updates.dta
      #endif))
(loading_screens
   (#include loading_screens.dta))
(videos
   #include videos.dta)
(data_graveyard)
#ifndef HX_EE
(helpbar
   (drum_icon_width 18)
   (vocal_icon_width 18)
   #ifdef HX_WII
   (guitar_icon_width 25)
   #else
   (guitar_icon_width 20)
   #endif
   (start_icon_width 18)
   (label_space 0)
   #ifdef HX_PS3
   (option_icon_width 25)
   #else
   #ifdef HX_WII
   (option_icon_width 25)
   #else
   (option_icon_width 20)
   #endif
   #endif)
(generate_wavdata FALSE)
(vocal_score_song FALSE)
#ifndef HX_WII
(ugcnet
   (packets_per_chunk 20))
#endif
#else
(generate_weights FALSE)
(generate_panfiles FALSE)
(holmes
   (log_host video)
   (log_path
      "O:\\filedepot\\rockband\\statlor\\uploaded"))
#endif
#merge ../../../system/run/config/default.dta